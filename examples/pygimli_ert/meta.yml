title: PyGIMLi ERT
application domain: CoFI Examples -> EARTH SCIENCES -> Geophysics -> Electrical and electromagnetic methods in geophysics -> Electrical -> Electrical resistivity tomography
description: Using the ERT solver provided by PyGIMLi, we use different CoFI solvers to solve the corresponding inverse problem
method:
  pygimli_ert.ipynb: 
    description: Using the ERT solver provided by PyGIMLi, we use trust-exact proviced by SciPY to solve the corresponding inverse problem
    methods: 
      - CoFI -> Parameter estimation -> Optimization -> Non linear -> scipy.optimize.minimize -> trust-exact
  pygimli_ert_rect_gauss_newton.py:
    description: Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh
    methods: 
      - CoFI -> Parameter estimation -> Optimization -> Non linear -> cofi.simple_newton -> Newton's method in optimization
  pygimli_ert_rect_scipy_min.py:
    description: Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a rectangular mesh
    methods: 
    - CoFI -> Parameter estimation -> Optimization -> Non linear -> scipy.optimize.minimize -> trust-exact
  pygimli_ert_toy_emcee_parallel.py:
    description: Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem in parallel
    methods: 
    - CoFI -> Ensemble methods -> Bayesian sampling -> McMC samplers -> emcee -> StretchMove
  pygimli_ert_toy_emcee.py:
    description: Using the ERT solver provided by PyGIMLi, we try using emcee to solve inverse problem
    methods: 
    - CoFI -> Ensemble methods -> Bayesian sampling -> McMC samplers -> emcee -> StretchMove
  pygimli_ert_tri_gauss_newton.py:
    description: Using the ERT solver provided by PyGIMLi, we use a Gauss Newton method to solve the inverse problem on a triangular mesh
    methods: 
    - CoFI -> Parameter estimation -> Optimization -> Non linear -> cofi.simple_newton -> Newton's method in optimization
  pygimli_ert_tri_scipy_min.py:
    description: Using the ERT solver provided by PyGIMLi, we use a Trust region method to solve the inverse problem on a triangular mesh
    methods: 
    - CoFI -> Parameter estimation -> Optimization -> Non linear -> scipy.optimize.minimize -> trust-exact
  pygimli_ert_tri_torch_optim.py:
    description: Using the ERT solver provided by PyGIMLi, we use a LBFGS to solve the inverse problem on a triangular mesh
    methods: 
    - CoFI -> Parameter estimation -> Optimization -> Non linear -> torch.optim -> LBFGS
